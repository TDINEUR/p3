#include <stdio.h>
#include <stdint.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
// typedef
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
//
// a verif
#include <stdio.h>
#include <stdint.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdint.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <arpa/inet.h>



uint32_t NB_NODES, NB_LINKS;
int64_t* dist;
uint32_t* path;
int64_t (*links)[3];
uint32_t* ri ;
uint32_t* res;
int32_t read_uint32_be(uint8_t* data) {
    return be32toh(*(uint32_t*)data);
}

int32_t read_int32_be(uint8_t* data) {
    return (int32_t)read_uint32_be(data);
}

uint64_t read_uint64_be(uint8_t* data) {
    return be64toh(*(uint64_t*)data);
}

int64_t read_int64_be(uint8_t* data) {
    return (int64_t)read_uint64_be(data);
}
void get_file_infos(uint8_t* data, uint32_t* NB_NODES, uint32_t* NB_LINKS) {
    *NB_NODES = read_uint32_be(data);
    *NB_LINKS = read_uint32_be(data + 4);
}

void read_graph(const char* filename, int verbose) {
   FILE* fd = fopen(filename, "rb");
   if (fd == NULL) {
      fprintf(stderr, "Cannot open file %s\n", filename);
      return;
   }
   fseek(fd, 0L, SEEK_END);
   size_t file_size = ftell(fd);
   rewind(fd);


   uint8_t* binary_data = (uint8_t*)malloc(file_size * sizeof(uint8_t));
   if (binary_data == NULL) {
      fprintf(stderr, "Cannot allocate memory for binary data\n");
      fclose(fd);
      return;
   }
   fread(binary_data, sizeof(uint8_t), file_size, fd);
   fclose(fd);

   get_file_infos(binary_data, &NB_NODES, &NB_LINKS);

   if (verbose) {
      printf("Nombre de noeuds : %d, nombre de liens : %d\n", NB_NODES, NB_LINKS);
   }

   // initialize dist
   // j ai changé int32 //////////////////////////////////////////////////////////////////////
   dist = (int64_t*)malloc(NB_NODES * sizeof(int64_t));

   if (dist == NULL) {
      fprintf(stderr, "Cannot allocate memory for dist array\n");
      free(binary_data);
      return;
   }

   // initialize path 
   path = (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));// size good defined
   ri= (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));
   res= (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));
   if (path == NULL) {
      fprintf(stderr, "Cannot allocate memory for path array\n");
      free(binary_data);
      return;
   } 

   uint8_t* data_ptr = binary_data + 8;
   uint32_t node_from, node_to;
   int32_t cost;

   typedef struct {
   uint32_t node_from;
   uint32_t node_to;
   int32_t cost;
   } Link;

   // mieux ne vaut pas le crée comme ca mais plutot comme ceci

   links = malloc(NB_LINKS * sizeof(Link));
   if (links == NULL) {
      fprintf(stderr, "Couldn't allocate memory for links\n");
      free(dist);
      free(path);
      free(binary_data);
      return;
   }


   for (int i = 0; i < NB_LINKS; i++) {
      node_from =  read_uint32_be(data_ptr+ i * 12);
      node_to = read_uint32_be(data_ptr+ i * 12 + 4);
      cost = read_int32_be(data_ptr+ i * 12 + 8);// HAS TO BE CHANGED IT SHOULD BE SIGNED
      links[i][0] = node_from;//un entier non-signé sur 32b
      links[i][1] = node_to;//un entier non-signé
      links[i][2] = cost;//un entier signé

      printf("%d %d %d\n", node_from, node_to, cost);
      
   }
   free(binary_data);// bien mis
   //free(dist);
}


bool bellman_ford(int64_t(*links)[3], uint32_t s, bool verbose){
  
   const uint32_t INF = UINT32_MAX;
   for (uint32_t i = 0; i < NB_NODES; i++) {
        dist[i] = INF;
        path[i] = 0;//is unsigned donc on peut pas l'init a -1 comme pour python 
    }
   dist[s] = 0;

   for (uint32_t i = 0; i < NB_NODES - 1; i++) {

      for (uint32_t j = 0; j < NB_LINKS; j++) {
         uint32_t node_from = links[j][0];// links[j].node_from;// pas certain 
         uint32_t node_to =links[j][1];//links[j].node_to;
         int32_t cost = links[j][2];//links[j].cost;

         if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
            dist[node_to] = dist[node_from] + cost;
            path[node_to] = node_from;
         }
      }
   }
   for (uint32_t j = 0; j < NB_LINKS; j++) {
      
      uint32_t node_from = links[j][0];// links[j].node_from;// pas certain 
      uint32_t node_to =links[j][1];//links[j].node_to;
      int32_t cost = links[j][2];//links[j].cost;

      if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
         if(verbose){
            printf("Negative cycle detected\n");
         }
         for( uint32_t i=0;i< NB_NODES; i++) {
            dist[i] = INF;
            path[i] = -1;
         }
         dist[s]=0;
         return false;
      }          
   }
   return true;

   
}
typedef struct {
    uint32_t node_idx;
    int64_t dist;
} NodeDist; 

NodeDist get_max(int64_t* dist, uint32_t s) {
    /*nous vous demandons de sélectionner celui tel que l'indexe du noeud destination est le plus faible si deux sont egaux */
   
   int32_t max_cost = INT32_MIN;
   uint32_t max_node = s;
   for (uint32_t node_idx = 0; node_idx < NB_NODES; node_idx++) {
      if (node_idx != s && dist[node_idx] != INT32_MAX && dist[node_idx] > max_cost) { // tip top 
         max_cost = dist[node_idx];
         max_node = node_idx;
      }
   }
   if (max_cost == INT32_MIN) {
      if (dist[s] != INT32_MAX && dist[s] >= max_cost) {
         max_cost = dist[s];
      }
   }

   NodeDist result = {max_node, max_cost};
   return result;
}


//uint32_t* r = (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));

uint32_t* get_path(uint32_t dest, uint32_t* path, uint32_t source,uint32_t* ri) {
   //ri = (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));
   //uint32_t* ri [NB_NODES];
   uint32_t i = dest;
   uint32_t j = 0;

   while (i != source) {
      ri[j++] = i;
      i = path[i];
   }
   ri[j++] = i;
   //uint32_t* res = (uint32_t*) malloc(sizeof(uint32_t) * j);
   for (uint32_t k = 0; k < j; k++) {
      res[k] = ri[j-1-k];
   }
   //free(ri);
   return res;
   
   
}   

/*
int main() { // this is working 


   read_graph("graph.bin", 1);
   int32_t s = 0;  // Sommet source.
   bool verbose = true;  // Afficher les messages de debug.

   bellman_ford(links, s, verbose);
   for (int i = 0; i < NB_NODES; i++) {
      printf("Node %d: distance = %lu, path = %u\n", i, dist[i], path[i]);
   }
   free(links);
   
   uint32_t dest=2;
   //uint32_t* path_result = get_path(dest, path, s);
   //free(path_result);
   //free(path);
   get_path(dest, path, s,ri);

   uint32_t* path_result = get_path(dest, path, s,ri);

   printf("Shortest path from %d to %d: ", s, dest);

   for (uint32_t i = 0; i < NB_NODES; i++) {
      if (path_result[i] != -1) {
          printf("%d ", path_result[i]);
      }
   }

   printf("\n");
   //free(path_result);
   free(path);
   free(ri);
   free(res);

   NodeDist max_dist = get_max(dist, s);
   printf("Node with maximum distance: %d, distance = %lu\n", max_dist.node_idx, max_dist.dist);
   free(dist);

   return 0;
}*/


// this is not working 
// probleme de memoire  

int main() {

   read_graph("graph.bin", 1);

   FILE* fp = fopen("data.bin", "wb");
   if (!fp) {
      perror("Failed to open file");
      exit(EXIT_FAILURE);
   }
   
    //1 write the number of nodess
   
   uint32_t be_number_node = htonl(NB_NODES);
   fwrite(&be_number_node, sizeof(uint32_t), 1, fp);

   
   for (uint32_t i = 0; i < NB_NODES; i++) {
      // Write the source node
      uint32_t be_source_node = htonl(i);//i is my source node 
      fwrite(&be_source_node, sizeof(uint32_t), 1, fp);
      
      bool verbose = true;  // Afficher les messages de debug.
      bellman_ford(links, i, verbose);
      NodeDist max_dist = get_max(dist, i);

      //printf("Node with maximum distance: %d, distance = %lu\n", max_dist.node_idx, max_dist.dist);
      // encode max dest node
      uint32_t be_dest_node = htonl( max_dist.node_idx);
      fwrite(&be_dest_node, sizeof(uint32_t), 1, fp); 
      // encode max dist 
      uint64_t be_distance = htonl(max_dist.dist);
      fwrite(&be_distance, sizeof(uint64_t), 1, fp);
      

      // take the path to this node 
      
      uint32_t* path_result = get_path(max_dist.node_idx, path, i,ri);


      // il faudrait essayer d'initialiser les diff partie de path a autre chose que 0  
      uint32_t count=0;
      for (uint32_t k = 0; k < NB_NODES; k++) {
         if (k==0 && path_result[k]== i) {
               count+=1;

         }else if ( k>1 && path_result[k]== i){
               break;//typiquement 0 2 0 0 0  if faut stop quand on retombe sur un 0 mais pas si le zero est a l index 1 car alors ca veut dire qu'on est dans le cas de 0->0


         }else{
               count+=1;
         }
      }
      uint32_t be_NUMBERPATH_node = htonl(count);
      fwrite(&be_NUMBERPATH_node, sizeof(uint32_t), 1, fp); 

      //writting path  
      for (uint32_t n = 0; n < count ; n++) {

         uint32_t be_p_node = htonl(path_result[n]);
         fwrite(&be_p_node, sizeof(uint32_t), 1, fp); 

      }
      free(path);
      free(ri);
      free(res);
      free(dist);

   }
    // Close the file
   fclose(fp);

    return 0;

}

