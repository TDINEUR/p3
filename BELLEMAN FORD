#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
// typedef
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
//
// a verif
#include <stdio.h>
#include <stdint.h>
#include <arpa/inet.h>

//end verif
/*"""a pointer to a byte array data and convert the first 4 bytes and the first 8 bytes of data to a 32-bit 
and a 64-bit integer in big-endian byte order using be32toh and be64toh functions, respectively"""
*/
//#define NB_NODES 4
//#define NB_LINKS 5
#define NB_NODES 5
#define NB_LINKS 7

//bool bellman_ford(Link links[NB_LINKS], int32_t s, bool verbose);
//int64_t links [NB_LINKS ] [ 3 ] = {{ 0 , 1 , 3 } ,{ 0 , 2 , -1},{ 2 , 3 , 1 } ,{ 3 , 0 , 1503 } ,{ 3 , 2 , 4}} ;
//int64_t links [NB_LINKS ] [ 3 ] = {{ 0 , 1 , 3 } ,{ 0 , 2 , -1},{ 2 , 3 , 1 } ,{ 3 , 0 , 1503 } ,{ 3 , 2 , 4},{0,4,15},{3,4,1}} ;
typedef struct {
   uint32_t node_from;
   uint32_t node_to;
   int32_t cost;
} Link;

typedef struct {
    uint32_t node_idx;
    int64_t dist;
} NodeDist;

bool bellman_ford(Link links[NB_LINKS], uint32_t s, bool verbose);

uint32_t* get_path(uint32_t dest, uint32_t* path, uint32_t source);

NodeDist get_max(int64_t dist[], uint32_t s);

int64_t dist[NB_NODES];// good 

uint32_t path[NB_NODES];

int main() {
    /*Link links[NB_LINKS] = {
        {0, 1, 3},
        {0, 2, -1},
        {2, 3, 1},
        {3, 0, 1503},
        {3, 2, 4}
    };
    */
    Link links[NB_LINKS] = {
        { 0 , 1 , 5 } ,{ 0 , 2 , 3},{ 2 , 3 , 1 } ,{ 3 , 0 , 1503 } ,{ 3 , 2 , 4},{ 0 , 4 , 15},{ 3 , 4 , 1 }} ;
    int32_t s = 0;  // Sommet source.
    bool verbose = true;  // Afficher les messages de debug.

    bellman_ford(links, s, verbose);
    for (int i = 0; i < NB_NODES; i++) {
        printf("Node %d: distance = %lld, path = %lld\n", i, dist[i], path[i]);
    }

   uint32_t dest=2;
   uint32_t* path_result = get_path(dest, path, s);
   printf("Shortest path from %d to %d: ", s, dest);
   for (int i = 0; i < NB_NODES; i++) {
      if (path_result[i] != -1) {
          printf("%d ", path_result[i]);
      }
   }
   printf("\n");
   free(path_result);

   
    NodeDist max_dist = get_max(dist, s);
    printf("Node with maximum distance: %d, distance = %lld\n", max_dist.node_idx, max_dist.dist);

    return 0;

    
}
bool bellman_ford(Link links[NB_LINKS], uint32_t s, bool verbose){
  
   const uint32_t INF = UINT32_MAX;
   for (uint32_t i = 0; i < NB_NODES; i++) {
        dist[i] = INF;
        path[i] = 0;//is unsigned donc on peut pas l'init a -1 comme pour python 
    }
   dist[s] = 0;

   for (uint32_t i = 0; i < NB_NODES - 1; i++) {

      for (uint32_t j = 0; j < NB_LINKS; j++) {

         uint32_t node_from = links[j].node_from;
         uint32_t node_to = links[j].node_to;
         int32_t cost = links[j].cost;

         if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
            dist[node_to] = dist[node_from] + cost;
            path[node_to] = node_from;
         }
      }
   }
   for (uint32_t j = 0; j < NB_LINKS; j++) {
      uint32_t node_from = links[j].node_from;// pas certain 
      uint32_t node_to = links[j].node_to;
      int32_t cost = links[j].cost;

      if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
         if(verbose){
            printf("Negative cycle detected\n");
         }
         for( uint32_t i=0;i< NB_NODES; i++) {
            dist[i] = INF;
            path[i] = -1;
         }
         dist[s]=0;
         return false;
      }          
   }
   return true;

   
}
// nicelly working
uint32_t* get_path(uint32_t dest, uint32_t* path, uint32_t source) {

    /*Retourne une liste contenant le chemin de `source` vers `dest`
    en utilisant le tableau de précédence `path`.*/
    
   
    uint32_t* r = (uint32_t*) malloc(sizeof(uint32_t) * NB_NODES);
    uint32_t i = dest;
    uint32_t j = 0;
    while (i != source) {
        r[j++] = i;
        i = path[i];
    }
    r[j++] = i;
    uint32_t* result = (uint32_t*) malloc(sizeof(uint32_t) * j);
    for (uint32_t k = 0; k < j; k++) {
        result[k] = r[j-1-k];
    }
    free(r);
    return result;
}   

NodeDist get_max(int64_t* dist, uint32_t s) {
    /*nous vous demandons de sélectionner celui tel que l'indexe du noeud destination est le plus faible si deux sont egaux */
   
   int32_t max_cost = INT32_MIN;
   uint32_t max_node = s;
   for (uint32_t node_idx = 0; node_idx < NB_NODES; node_idx++) {
      if (node_idx != s && dist[node_idx] != INT32_MAX && dist[node_idx] > max_cost) { // tip top 
         max_cost = dist[node_idx];
         max_node = node_idx;
      }
   }
   if (max_cost == INT32_MIN) {
      if (dist[s] != INT32_MAX && dist[s] >= max_cost) {
         max_cost = dist[s];
      }
   }

   NodeDist result = {max_node, max_cost};
   return result;
}
