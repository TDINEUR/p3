//encode(NB_NODES);

   /*FILE* fp = fopen("data.bin", "wb");
   if (!fp) {
      perror("Failed to open file");
      exit(EXIT_FAILURE);
   }*/
   // try 
    //1 write the number of nodess
   /*t the NB_NODES variable you are trying to write to the file is correctly defined and has a valid value*/
   //uint32_t be_int32 = be32toh(NB_NODES);
   //fwrite(&be_int32, sizeof(be_int32), 1, fp);*/
   
   //uint32_t be_number_node = htonl(NB_NODES);
   //printf("The type of NB_NODES is: %zu bytes\n", sizeof(NB_NODES));//4 donc ok good type 
   //fwrite(&be_number_node, sizeof(uint32_t), 1, fp);

   /*
   for (uint32_t i = 0; i < NB_NODES; i++) {
      // Write the source node
      uint32_t be_source_node = htonl(i);//i is my source node 
      fwrite(&be_source_node, sizeof(uint32_t), 1, fp);
      
      bool verbose = true;  // Afficher les messages de debug.
      bellman_ford(links, i, verbose);
      NodeDist max_dist = get_max(dist, i);

      //printf("Node with maximum distance: %d, distance = %lu\n", max_dist.node_idx, max_dist.dist);
      // encode max dest node
      uint32_t be_dest_node = htonl( max_dist.node_idx);
      fwrite(&be_dest_node, sizeof(uint32_t), 1, fp); 
      // encode max dist 
      uint64_t be_distance = htonl(max_dist.dist);
      fwrite(&be_distance, sizeof(uint64_t), 1, fp);
      

      // take the path to this node 
      
      uint32_t* path_result = get_path(max_dist.node_idx, path, i,ri);


      // il faudrait essayer d'initialiser les diff partie de path a autre chose que 0  
      uint32_t count=0;
      for (uint32_t k = 0; k < NB_NODES; k++) {
         if (k==0 && path_result[k]== i) {
               count+=1;

         }else if ( k>1 && path_result[k]== i){
               break;//typiquement 0 2 0 0 0  if faut stop quand on retombe sur un 0 mais pas si le zero est a l index 1 car alors ca veut dire qu'on est dans le cas de 0->0


         }else{
               count+=1;
         }
      }
      uint32_t be_NUMBERPATH_node = htonl(count);
      fwrite(&be_NUMBERPATH_node, sizeof(uint32_t), 1, fp); 

      //writting path  
      for (uint32_t n = 0; n < count ; n++) {

         uint32_t be_p_node = htonl(path_result[n]);
         fwrite(&be_p_node, sizeof(uint32_t), 1, fp); 

      }
      free(path);
      free(ri);
      free(res);
      free(dist);

   }*/
    // Close the file
   //fclose(fp);
