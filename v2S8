#include "../include/graph.h"

#include <stdio.h>
#include <stdint.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <stdbool.h>
#include <limits.h>


uint32_t NB_NODES, NB_LINKS;
int64_t* dist;
uint32_t* path;
int64_t (*links)[3];
uint32_t* ri ;
uint32_t* res;

//permettent le passage en bigendian
int32_t read_uint32_be(uint8_t* data) {
    return be32toh(*(uint32_t*)data);
}

int32_t read_int32_be(uint8_t* data) {
    return (int32_t)read_uint32_be(data);
}

uint64_t read_uint64_be(uint8_t* data) {
    return be64toh(*(uint64_t*)data);
}

int64_t read_int64_be(uint8_t* data) {
    return (int64_t)read_uint64_be(data);
}


void get_file_infos(uint8_t* data, uint32_t* NB_NODES, uint32_t* NB_LINKS) {
    *NB_NODES = read_uint32_be(data);
    *NB_LINKS = read_uint32_be(data + 4);
}


void read_graph(FILE* filename, int verbose) {
   FILE* fd =filename;// fopen(filename, "rb");
   if (fd == NULL) {
      fprintf(stderr, "Cannot open file");
      return;
   }
   fseek(fd, 0L, SEEK_END);
   size_t file_size = ftell(fd);
   rewind(fd);

   uint8_t* binary_data = (uint8_t*)malloc(file_size * sizeof(uint8_t));

   if (binary_data == NULL) {
      fprintf(stderr, "Cannot allocate memory for binary data\n");
      free(binary_data);
      fclose(fd);
      return;
   }

   fread(binary_data, sizeof(uint8_t), file_size, fd);
   fclose(fd);


   get_file_infos(binary_data, &NB_NODES, &NB_LINKS);


   /*if (verbose) {
      printf("Nombre de noeuds : %d, nombre de liens : %d\n", NB_NODES, NB_LINKS);
   }*/


   uint8_t* data_ptr = binary_data + 8;
   uint32_t node_from, node_to;
   int32_t cost;

   
   links = malloc(NB_LINKS * sizeof(int64_t[3]));
   if (links == NULL) {
      fprintf(stderr, "Couldn't allocate memory for links\n");
      free(dist);
      free(path);
      free(binary_data);
      return;
   }

   for (uint32_t i = 0; i < NB_LINKS; i++) {
      node_from =  read_uint32_be(data_ptr+ i * 12);
      node_to = read_uint32_be(data_ptr+ i * 12 + 4);
      cost = read_int32_be(data_ptr+ i * 12 + 8);
      if (cost > 0x7fffffff) {
        cost = cost - 0xffffffff - 1;
      }
      links[i][0] = node_from;
      links[i][1] = node_to;
      links[i][2] = cost;
      //printf("The type of NB_NODES is: %u bytes\n",links[i][2] );

      //printf("%d %d %d\n", node_from, node_to, cost);  
   }
   free(binary_data);
   
}



bool bellman_ford(int64_t(*links)[3], uint32_t s, bool verbose){

   dist = (int64_t*)malloc(NB_NODES * sizeof(int64_t));

   if (dist == NULL) {
      fprintf(stderr, "Cannot allocate memory for dist array\n");  
   }

   
   path = (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));

   if (path == NULL) {
      fprintf(stderr, "Cannot allocate memory for path array\n");
   } 
   
   const uint32_t INF = UINT32_MAX;
   for (uint32_t i = 0; i < NB_NODES; i++) {
        dist[i] = INF;
        path[i] = 0;
    }
   dist[s] = 0;

   for (uint32_t i = 0; i < NB_NODES - 1; i++) {

      for (uint32_t j = 0; j < NB_LINKS; j++) {
         uint32_t node_from = links[j][0]; 
         uint32_t node_to =links[j][1];
         int32_t cost = links[j][2];;

         if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
            dist[node_to] = dist[node_from] + cost;
            path[node_to] = node_from;
         }
      }
   }
   for (uint32_t j = 0; j < NB_LINKS; j++) {
      
      uint32_t node_from = links[j][0];// links[j].node_from;// pas certain 
      uint32_t node_to =links[j][1];//links[j].node_to;
      int32_t cost = links[j][2];//links[j].cost;

      if (dist[node_from] != INF && dist[node_to] > dist[node_from] + cost) {
         if(verbose){
            printf("Negative cycle detected\n");
         }
         for( uint32_t i=0;i< NB_NODES; i++) {
            dist[i] = INF;
            path[i] = -1;
         }
         dist[s]=0;
         return false;
      }          
   }
   return true;
   
}


typedef struct {
    uint32_t node_idx;
    int64_t dist;
} NodeDist; 

NodeDist get_max(int64_t* dist, uint32_t s) {
    
   int32_t max_cost = INT32_MIN;
   uint32_t max_node = s;
   for (uint32_t node_idx = 0; node_idx < NB_NODES; node_idx++) {
      if (node_idx != s && dist[node_idx] != INT32_MAX && dist[node_idx] > max_cost) { // tip top 
         max_cost = dist[node_idx];
         max_node = node_idx;
      }
   }
   if (max_cost == INT32_MIN) {
      if (dist[s] != INT32_MAX && dist[s] >= max_cost) {
         max_cost = dist[s];
      }
   }
   
   NodeDist result = {max_node, max_cost};
   return result;
}


uint32_t* get_path(uint32_t dest, uint32_t* path, uint32_t source) {
   
   uint32_t i = dest;
   uint32_t j = 0;
   ri= (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));
   res= (uint32_t*)malloc(NB_NODES * sizeof(uint32_t));

   while (i != source) {
      ri[j++] = i;
      i = path[i];
   }
   ri[j++] = i;
   
   for (uint32_t k = 0; k < j; k++) {
      res[k] = ri[j-1-k];
   }
   
   return res;
      
}   

void bell_result_tobinary(FILE* output_stream){

//int main() {
   
   //int32_t s = 0;  

  // bool verbose = true;  

   FILE* fp = output_stream;
   if (!fp) {
      perror("Failed to open file");
      exit(EXIT_FAILURE);
   }
   
   uint32_t be_number_node = htonl(NB_NODES);
   fwrite(&be_number_node, sizeof(uint32_t), 1, fp);
   printf("Node %d:\n", NB_NODES);
   
   for (uint32_t i = 0; i < NB_NODES; i++) {

      // Write the source node
      uint32_t be_source_node = htonl(i); 
      fwrite(&be_source_node, sizeof(uint32_t), 1, fp);
      
      printf("source %d:\n", i);
      

      bool verbose = true;  
      bellman_ford(links, i, verbose);
      NodeDist max_dist = get_max(dist, i);

      
      uint32_t be_dest_node = htonl( max_dist.node_idx);
      fwrite(&be_dest_node, sizeof(uint32_t), 1, fp); 

      printf("dest %d:\n", max_dist.node_idx );
      // encode max dist 

      uint64_t be_distance = htonl(max_dist.dist);
      fwrite(&be_distance, sizeof(uint64_t), 1, fp);

      printf("dist %ld:\n", max_dist.dist );

      // take the path to this node 
      
      uint32_t* path_result = get_path(max_dist.node_idx, path, i);

      
      uint32_t k=0;

      while (path_result[k]!=max_dist.node_idx ){
         k+=1;
      }
      //printf(k);
      k+=1;
      
      uint32_t be_NUMBERPATH_node = htonl(k);
      fwrite(&be_NUMBERPATH_node, sizeof(uint32_t), 1, fp); 
      printf("nodes in path %d:\n", k);

      //writting path  
      for (uint32_t n = 0; n < k ; n++) {

         uint32_t be_p_node = htonl(path_result[n]);
         fwrite(&be_p_node, sizeof(uint32_t), 1, fp); 
         printf("number nodes in path %d:\n",path_result[n] );


      }
      printf("\n");

      free(path);
      free(ri);
      free(res);
      free(dist);

   }
   fclose(fp);

}



